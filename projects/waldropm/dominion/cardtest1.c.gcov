        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Test simthyRefactor()
        -:    3: *  Include the following lines in your makefile:
        -:    4: *
        -:    5: *  cardtest1: cardtest1.c dominion.o rngs.o
        -:    6: *	gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    7: *
        -:    8: * type "./cardtest1" to run
        -:    9: * -----------------------------------------------------------------------
        -:   10: */
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include <string.h>
        -:   15:#include <stdio.h>
        -:   16:#include <assert.h>
        -:   17:#include "rngs.h"
        -:   18:#include <math.h>
        -:   19:#include <stdlib.h>
        -:   20:
function testSmithyRefactor called 1 returned 100% blocks executed 83%
        1:   21:void testSmithyRefactor(){
        1:   22:    int numPlayer = 2;
        -:   23:    struct gameState G;
        -:   24:    int player, before_hand, before_playCard, before_deck, after_hand, after_playCard, after_deck;
        -:   25:    int handPos;
        1:   26:    int k[12] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward};
        1:   27:    printf("+++++smithyRefactor() tests begin+++++\n");
call    0 returned 100%
        1:   28:    initializeGame(numPlayer, k, 2, &G); // init a game
call    0 returned 100%
        -:   29:    
        -:   30:    // test playing simity card for each player
        3:   31:    for (player = 0; player < numPlayer; player++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   32:        G.hand[player][G.handCount[player]] = smithy; // player gets the smithy card
        2:   33:        G.handCount[player]++;
        2:   34:        before_hand = G.handCount[player]; // record the total cards number in hand
        2:   35:        before_deck = G.deckCount[player]; // record the total cards number in deck
        2:   36:        before_playCard = G.playedCardCount; // record the play cards number
        -:   37:        
        2:   38:        handPos = G.handCount[player] - 1; // record the smithy card position
        2:   39:        smithyRefactor (&player, &G, &handPos); // play the smithy card
call    0 returned 100%
        -:   40:        
        2:   41:        after_hand = G.handCount[player]; // record the total cards number in hand
        2:   42:        after_deck = G.deckCount[player]; // record the total cards number in deck
        2:   43:        after_playCard = G.playedCardCount; // record the play cards number
        -:   44:
        2:   45:        printf("-------------Test player %d----------------.\n", player);
call    0 returned 100%
        2:   46:        printf("Test player %d had %d card(s) in hand before, and %d card(s) after playing smithy.\n", player, before_hand, after_hand);
call    0 returned 100%
        2:   47:        printf("Test player %d had %d card(s) in deck before, and %d card(s) after playing smithy.\n", player, before_deck, after_deck);
call    0 returned 100%
        2:   48:        printf("Test player %d had %d playcard(s) before, and %d playcard(s) after playing smithy.\n", player, before_playCard, after_playCard);
call    0 returned 100%
        -:   49:        
        2:   50:        assert(after_hand == before_hand + 2); // get 3 new cards and played smithy card, so user has 3 - 1 = 2 more cards in hand now.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   51:        assert(before_deck - 3 == after_deck); // deck lost 3 card now.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   52:        assert(before_playCard + 1 == after_playCard); // smithy card goes to playcards.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   53:        
        -:   54:    }
        1:   55:    printf("+++++smithyRefactor() test passed+++++\n");
call    0 returned 100%
        -:   56:    
        1:   57:}
        -:   58:
function main called 1 returned 100% blocks executed 100%
        1:   59:int main(int argc, char *argv[]){
        1:   60:    testSmithyRefactor();
call    0 returned 100%
        1:   61:    return 0;
        -:   62:}
        -:   63:
