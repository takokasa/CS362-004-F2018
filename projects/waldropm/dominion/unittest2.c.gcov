        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * testFullDeckCount: testFullDeckCount.c dominion.o rngs.o
        -:    5: *	gcc -o testFullDeckCount -g  testFullDeckCount.c dominion.o rngs.o $(CFLAGS)
        -:    6: *
        -:    7: * type "./testFullDeckCount" to run
        -:    8: * -----------------------------------------------------------------------
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:#include <math.h>
        -:   18:#include <stdlib.h>
        -:   19:
function setDeckCount called 6 returned 100% blocks executed 100%
        6:   20:void setDeckCount(int player, int card, struct gameState *state) {
        -:   21:    
        -:   22:    int i;
        -:   23:    // printf("state->deckCount[player] = %d\n ", state->deckCount[player]);
       66:   24:    for (i = 0; i < state->deckCount[player]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   25:        // printf("state->deck[player][i] = %d\n", state->deck[player][i]);
       60:   26:        state->deck[player][i] = card;
        -:   27:    }
        -:   28:    
       66:   29:    for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:   30:        state->hand[player][i] = card;
        -:   31:    }
        -:   32:    
       66:   33:    for (i = 0; i < state->discardCount[player]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:   34:        state->discard[player][i] = card;
        -:   35:    }
        -:   36:    
        6:   37:}
        -:   38:
function testFullDeckCount called 1 returned 100% blocks executed 88%
        1:   39:void testFullDeckCount(){
        -:   40:
        1:   41:    int numPlayer = 2;
        1:   42:    int maxCardCount = 3;
        -:   43:    int p, cardCount;
        1:   44:    int cards[3] = {curse, estate, duchy}; // test for different cards
        -:   45:    struct gameState G;
        -:   46:    int i,j;
        3:   47:    for (i = 0; i < numPlayer; i++){ // initialize the cards of deck, hand, and discard
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   48:        G.deckCount[i] = 0;
        2:   49:        G.handCount[i] = 0;
        2:   50:        G.discardCount[i] = 0;
        8:   51:        for (j = 0; j < 3; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:   52:            G.deck[i][j] = estate;
        6:   53:            G.deckCount[i]++;
        6:   54:            G.hand[i][j] = estate;
        6:   55:            G.handCount[i]++;
        6:   56:            G.discard[i][j] = estate;
        6:   57:            G.discardCount[i]++;
        -:   58:        }
       16:   59:        for (j = 3; j < 10; j++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       14:   60:            G.deck[i][j] = copper;
       14:   61:            G.deckCount[i]++;
       14:   62:            G.hand[i][j] = copper;
       14:   63:            G.handCount[i]++;
       14:   64:            G.discard[i][j] = copper;
       14:   65:            G.discardCount[i]++;
        -:   66:        }
        -:   67:    }
        1:   68:    printf ("TESTING fullDeckCount():\n");
call    0 returned 100%
        1:   69:    assert(fullDeckCount(1, estate, &G) == 9);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   70:    assert(fullDeckCount(0, copper, &G) == 21);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   71:    assert(fullDeckCount(0, duchy, &G) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   72:    
        3:   73:    for (p = 0; p < numPlayer; p++){// test for all players
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8:   74:        for (cardCount = 0; cardCount < maxCardCount; cardCount++){ // test for different cards
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:   75:            setDeckCount(p, cards[cardCount], &G); // reset all the cards to the chosen card
call    0 returned 100%
        6:   76:            printf("fullDeckCount() = %d, expected = %d\n", fullDeckCount(p, cards[cardCount], &G) , 30);
call    0 returned 100%
call    1 returned 100%
        6:   77:            assert(fullDeckCount(p, cards[cardCount], &G) == 30);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   78:        }
        -:   79:    }
        1:   80:    printf("All tests passed!\n");
call    0 returned 100%
        -:   81:            
        1:   82:}
        -:   83:
function main called 1 returned 100% blocks executed 100%
        1:   84:int main(int argc, char *argv[]){
        1:   85:    testFullDeckCount();
call    0 returned 100%
        1:   86:    return 0;
        -:   87:}
