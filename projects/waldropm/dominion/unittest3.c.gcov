        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * testIsGameOver: testIsGameOver.c dominion.o rngs.o
        -:    5: *  gcc -o testIsGameOver -g  testIsGameOver.c dominion.o rngs.o $(CFLAGS)
        -:    6: *
        -:    7: * type "./testIsGameOver" to run
        -:    8: * -----------------------------------------------------------------------
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:#include <math.h>
        -:   18:#include <stdlib.h>
        -:   19:
        -:   20:// int isGameOver(struct gameState *state) {
        -:   21://   int i;
        -:   22://   int j;
        -:   23:	
        -:   24://   //if stack of Province cards is empty, the game ends
        -:   25://   if (state->supplyCount[province] == 0)
        -:   26://     {
        -:   27://       return 1;
        -:   28://     }
        -:   29:
        -:   30://   //if three supply pile are at 0, the game ends
        -:   31://   j = 0;
        -:   32://   for (i = 0; i < 25; i++)
        -:   33://     {
        -:   34://       if (state->supplyCount[i] == 0)
        -:   35:// 	{
        -:   36:// 	  j++;
        -:   37:// 	}
        -:   38://     }
        -:   39://   if ( j >= 3)
        -:   40://     {
        -:   41://       return 1;
        -:   42://     }
        -:   43:
        -:   44://   return 0;
        -:   45:// }
        -:   46:
function testIsGameOver called 1 returned 100% blocks executed 78%
        1:   47:void testIsGameOver () {
        -:   48:  struct gameState G;
        -:   49:  int i;
        1:   50:  printf ("TESTING isGameOver():\n");
call    0 returned 100%
        -:   51:
       26:   52:  for (i = 0; i < 25; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   53:    G.supplyCount[i] = 10;
        -:   54:  }
        -:   55:
        -:   56:  // test 1
        1:   57:  assert(isGameOver(&G) == 0); // not game over
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   58:  // test 2
        1:   59:  G.supplyCount[province] = 0; // set province count = 0
        1:   60:  assert(isGameOver(&G) == 1); // game over
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   61:  // test 3
        1:   62:  G.supplyCount[province] = 1; // now you have non empty province cards, game should continue normally
        1:   63:  G.supplyCount[curse] = 0;
        1:   64:  G.supplyCount[estate] = 0;
        1:   65:  G.supplyCount[gold] = 0;
        1:   66:  assert(isGameOver(&G) == 1); // game should end because three piles are empty
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   67:  // test 4
        1:   68:   G.supplyCount[curse] = 1; // curse is no longer empty
        1:   69:   G.supplyCount[estate] = 0;
        1:   70:   G.supplyCount[gold] = 0;
        1:   71:   assert(isGameOver(&G) == 0); // Game should not end because three supply piles are not empty
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   72:   
        1:   73:   printf ("All tests for isGameOver() passed!\n");
call    0 returned 100%
        1:   74:}
        -:   75:
function main called 1 returned 100% blocks executed 100%
        1:   76:int main(int argc, char *argv[]){
        1:   77:    testIsGameOver();
call    0 returned 100%
        1:   78:    return 0;
        -:   79:}
